#include <stdio.h>
#include <stdlib.h>


struct listelem {
  int data;
  struct listelem *next;
};

typedef struct listelem list;

struct listelem *add(int x, struct listelem *l);
struct listelem *insert(int x, struct listelem *l);
struct listelem *delete(int x, struct listelem *l);
void print_list(struct listelem *l);



int main(void)
{
  list *l;

  l = NULL;
  int data = 0;
  int i;

  // printf("1以上9999以下の自然数を10回入力してください\n");

  for(i=0;i<10;i++) {
    scanf("%d",&data);
    l = add(data, l);
  }

  print_list(l);

  // printf("Insertを開始します。1以上9999以下の自然数を10回入力してください。\n");

  for(i=0;i<10;i++) {
    scanf("%d",&data);
    l = insert(data, l);
    print_list(l);
  }



  // printf("Deleteを開始します。1以上9999以下の自然数を10回入力してください\n");

  for(i=0;i<10;i++) {
    scanf("%d",&data);
    l = delete(data, l);
    print_list(l);
  }

  return 0;
}


struct listelem *add(int data, struct listelem *l)
{
  struct listelem *p;

  if ((p = (struct listelem *) malloc(sizeof(struct listelem))) == NULL) {
    printf("malloc error\n");
    exit(EXIT_FAILURE);
  }

  p->data = data;
  p->next = l;
  l = p;

  return l;

}


struct listelem *insert(int x, struct listelem *l)
{
  struct listelem *p,*q,*head;

  if ((p = (struct listelem *) malloc(sizeof(struct listelem))) == NULL) {
    printf("malloc error\n");
    exit(EXIT_FAILURE);
  }

  if ((q = (struct listelem *) malloc(sizeof(struct listelem))) == NULL) {
    printf("malloc error\n");
    exit(EXIT_FAILURE);
  }

  if ((head = (struct listelem *) malloc(sizeof(struct listelem))) == NULL) {
    printf("malloc error\n");
    exit(EXIT_FAILURE);
  }

  head = l;
  q = l->next;
  while(q !=NULL){
    if(q->data >= x){
      p->next = l->next;
      p->data = x;
      l->next = p;
      break;
    }
    l = l->next;
    q = q->next;
  }

  if(q == NULL){
    p->next = NULL;
    p->data = x;
    l->next = p;
  }

  return head;
}


struct listelem *delete(int x, struct listelem *l)
{
  struct listelem* p, *q, *r, *head;

  p = head = NULL;
  q = l;
  while (q!=NULL) {
    r = q->next;
    if (q->data == x) {
      free(q);
      if (p != NULL) p->next = r;
    } else {
      if (head == NULL) head = q;
      p = q;
    }
    q = r;
  }

  return head;

}


void print_list(struct listelem *l)
{
  while (l != NULL) {
    printf("%d ", l->data);
    l = l->next;
  }
  printf("\n");
}
