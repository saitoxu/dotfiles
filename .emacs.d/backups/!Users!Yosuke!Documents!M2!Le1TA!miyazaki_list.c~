#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "insertion.h"

#define NUMBER_OF_INTEGERS 10
#define MIN_INTEGER 1
#define MAX_INTEGER 9999

int main(void) {
  struct listelem *first = malloc(sizeof(struct listelem));
  struct listelem *elem;

  // printf("===== Insertion Sort =====\n\n");

  input_numbers(first);

  print_list(first);

  first = wait_command(first);

  // Free memory
  while (first != NULL) {
    elem = first->next;
    free(first);
    first = elem;
  }

  return 0;
}

/*
 * Input numbers from stdin
 */
int input_numbers(struct listelem *elem) {
  char inputBuffer[256];
  int inputInteger;
  int counter = 0;

  // printf("Please input 10 integer values (1 <= n <= 9999).\n");
  // printf("Press <Enter> to input next value.\n\n");

  // Read single line from stdin
  while (fgets(inputBuffer, sizeof(inputBuffer), stdin) != NULL) {
    // Convert to integer
    inputInteger = atoi(inputBuffer);
    // If inputed number is out of range, wait next input.
    if (validate_number(inputInteger)) {
      fprintf(stderr, "Out of range.\n");
      continue;
    }
    // Save number to data
    elem->data = inputInteger;

    counter++;

    // If the number of inputed number is enough, finish reading stdin.
    if (counter >= NUMBER_OF_INTEGERS) {
      break;
    } else {
      struct listelem *next = malloc(sizeof(struct listelem));
      elem->next = next;
      next->next = NULL;
      elem = next;
    }
  }

  // printf("Input completed.\n");

  return counter;
}

/*
 * Print list of listelem
 */
void print_list(struct listelem *elem) {
  while (elem != NULL) {
    printf("%d ", elem->data);
    elem = elem->next;
  }
  printf("\n");

  return;
}

/*
 * Wait command and execute it
 */
struct listelem * wait_command(struct listelem *elem) {
  // Variables for input
  char input_buffer[256];
  char input_chars[256];
  int input_number;

  // printf("Please input 'insert <n>','delete <n>' or 'exit'.\n");

  // Read single line from stdin
  while (fgets(input_buffer, sizeof(input_buffer), stdin) != NULL) {
    sscanf(input_buffer, "%s %d", input_chars, &input_number);
    if (strncmp(input_chars, "insert", 6) == 0) { // Insert command
      if (validate_number(input_number)) {
        fprintf(stderr, "Out of range.\n");
        continue;
      } else {
        elem = insert_item(input_number, elem);
        print_list(elem);
      }
    } else if (strncmp(input_chars, "delete", 6) == 0) { // Delete command
      if (validate_number(input_number)) {
        fprintf(stderr, "Out of range.\n");
        continue;
      } else {
        elem = delete_item(input_number, elem);
        print_list(elem);
      }
    } else if (strncmp(input_chars, "exit", 4) == 0) { // Exit command
      return elem;
    } else {
      fprintf(stderr, "Unknown command.\nPlease input 'insert <n>','delete <n>' or 'exit'.\n");
    }
    input_buffer[0] = '\0';
  }

  return elem;
}

/*
 * Insert item to list
 */
struct listelem * insert_item(int number, struct listelem *elem) {
  // First item of the list
  struct listelem *first = elem;
  // Item to be inserted
  struct listelem *i = malloc(sizeof(struct listelem));
  memset(i, '\0', sizeof(struct listelem));

  // If insert item to head of the list
  if (number <= elem->data) {
    i->data = number;
    i->next = elem;
    first = i;
  } else {
    // Loop
    while (elem->next != NULL) {
      if ((elem->data <= number) && (number <= elem->next->data)){
        i->data = number;
        i->next = elem->next;
        elem->next = i;
        break;
      }
      elem = elem->next;
    }
    // If end of the list
    if (elem->next == NULL) {
      i->data = number;
      elem->next = i;
    }
  }

  return first;
}

/*
 * Delete item from list
 */
struct listelem * delete_item(int number, struct listelem *elem) {
  // First item of the list
  struct listelem *first = elem;
  struct listelem *back = NULL;

  // Loop
  while (elem != NULL) {
    // If item shouldn't deleted
    if (elem->data != number) {
      // Next
      back = elem;
      elem = elem->next;
    } else {
      // If head of the list
      if (back == NULL) {
        // Set 'first' and delete item
        first = elem->next;
        free(elem);
        elem = first;
      } else {
        // Delete item
        back->next = elem->next;
        free(elem);
        elem = back->next;
      }
    }
  }

  return first;
}

/*
 * Validate number
 */
bool validate_number(int number) {
  if (!((MIN_INTEGER <= number) && (number <= MAX_INTEGER))) {
    return true;
  }
  return false;
}
