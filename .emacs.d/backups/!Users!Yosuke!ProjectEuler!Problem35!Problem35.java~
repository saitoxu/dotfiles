import java.io.*;
import java.util.*;

public class Problem35 {
    public static void main(String[] args) {
        String tmp = "";
        int length = 0;
        ArrayList<Integer> primeList = new ArrayList<Integer>();
        ArrayList<Integer> circularPrimeList = new ArrayList<Integer>();

        // 素数をprimeListに格納
        for (int i = 2; i < 1000000; i++) {
            if (primeList.size() == 0) {
                primeList.add(i);
            } else {
                for (int j = 0; j < primeList.size(); j++) {
                    if (i % primeList.get(j) == 0) {
                        break;
                    } else {
                        if (j == primeList.size() - 1) {
                            primeList.add(i);
                        }
                    }
                }
            }
        }

        // 巡回素数の絞り込み
        for (int i = 0; i < primeList.size(); i++) {
            tmp = Integer.toString(primeList.get(i));
            // System.out.println(tmp);
            char[] ch = tmp.toCharArray();
            length = Integer.toString(primeList.get(i)).length();
            // System.out.println(length);
            for (int j = 0; j < length; j++) {
                ch = generateNextCircularPrime(ch);
                // System.out.println(String.valueOf(ch));
                if (!primeList.contains(Integer.parseInt(String.valueOf(ch)))) {
                    break;
                } else {
                    if (j == length - 1) {
                        System.out.println(primeList.get(i));
                        circularPrimeList.add(primeList.get(i));
                    }
                }
            }
        }

        System.out.println("answer = " + circularPrimeList.size());
    }

    // 次の巡回数を生成
    private static char[] generateNextCircularPrime(char ch[]) {
        char[] rtn = new char[ch.length];

        for (int i = 0; i < ch.length - 1; i++) {
            rtn[i] = ch[i + 1];
        }
        rtn[ch.length -1] = ch[0];
        return rtn;
    }
}
